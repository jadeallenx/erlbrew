#!/bin/bash
#
# erlbrew: simplify / automate side-by-side Erlang builds
#
# Copyright (C) 2013 Mark Allen
# This software is released under the terms of the MIT license
# included in the README file or available here:
# http://opensource.org/licenses/MIT

set -e
set -u

usage() {
  echo "Usage: $0 {download|build|install|use|list} [release-spec]"
}

if (( $# > 2 )); then
    usage
    exit 1
elif (( $# == 2 )); then
  CMD=$1
  RELEASE=$2
elif (( $# == 1 )); then
    if [[ "$1" != "list" ]]; then
        usage
        exit 1
    fi
    CMD=$1
    RELEASE="dummy"
else
  usage
  exit 1
fi

WORK="$HOME/erlbrew"
STATE="$WORK/.erlbrew_current"
BUILD="$WORK/.build"
INSTALL="$WORK/$RELEASE"
FILENAME="otp_src_$RELEASE"
DOWNLOAD_FILE="$FILENAME.tar.gz"
TARBALL_PATH="$BUILD/tarballs"
CHECKSUM_PATH="$BUILD/MD5"
TMP_PATH="$BUILD/work.$$"
DOWNLOAD_PATH="$BUILD/tarballs/$DOWNLOAD_FILE"
DOWNLOAD_URL="https://www.erlang.org/download/$DOWNLOAD_FILE"
DOWNLOAD_TOOL=$(which curl)
DOWNLOAD_TOOL_FLAGS="--insecure --fail --progress-bar --show-error"
DOWNLOAD_OTP_CMD="$DOWNLOAD_TOOL $DOWNLOAD_TOOL_FLAGS --output $DOWNLOAD_PATH $DOWNLOAD_URL"
DOWNLOAD_CHECKSUM_CMD="$DOWNLOAD_TOOL $DOWNLOAD_TOOL_FLAGS --output $CHECKSUM_PATH https://www.erlang.org/download/MD5"
BIN_PATH="$HOME/bin/erlbrew.d"
UNTAR_CMD=$(which tar)
UNTAR_FLAGS="-zxvf"

_cleanup() {
  if [ -d $BUILD ]; then
    for directory in $(find "$BUILD" -name "work*" -type d -mtime +7d -print)
    do
      rm -rf $directory
    done
  fi
}

download() {
  if [ ! -d "$TARBALL_PATH" ]; then
    mkdir -p "$TARBALL_PATH"
  fi

  if [ ! -e "$DOWNLOAD_PATH" ]; then
    echo "Downloading Erlang $RELEASE"
    $DOWNLOAD_OTP_CMD
  else
    echo "You appear to have Erlang $RELEASE downloaded."
  fi

  CHECKSUM_FILE_VALUE=$(grep $DOWNLOAD_FILE $CHECKSUM_PATH 2>/dev/null | cut -d" " -f2)

  if [ ! -e "$CHECKSUM_PATH" ] || [ -z "$CHECKSUM_FILE_VALUE" ] ; then
      echo "Downloading checksum file"
      $DOWNLOAD_CHECKSUM_CMD

      CHECKSUM_FILE_VALUE=$(grep $DOWNLOAD_FILE $CHECKSUM_PATH | cut -d" " -f2)
  fi

  COMPUTED_CHECKSUM=$(md5 -q $DOWNLOAD_PATH)
  if [ "$CHECKSUM_FILE_VALUE" != "$COMPUTED_CHECKSUM" ]; then
    echo "The file $DOWNLOAD_PATH has MD5"
    echo "$COMPUTED_CHECKSUM and it should have"
    echo "$CHECKSUM_FILE_VALUE"
    exit 1
  fi

  echo "Tarball has correct MD5 checksum"

}

build() {
  mkdir -p "$TMP_PATH"
  rm -f "$BUILD/current"
  ln -s "$TMP_PATH" "$BUILD/current"
  cp -a "$DOWNLOAD_PATH" "$TMP_PATH"
  cd "$TMP_PATH"
  echo "Unpacking Erlang $RELEASE"
  $UNTAR_CMD $UNTAR_FLAGS $DOWNLOAD_FILE 1>>"$TMP_PATH/erlbrew.log" 2>&1
  cd "$FILENAME"

  echo "Configuring Erlang $RELEASE for $OSTYPE"
  CFLAGS=""

  if [[ "$OSTYPE" =~ darwin(.*) ]]
  then
    VERSION=${BASH_REMATCH[1]}
    # Patch the R14 source in OS X 10.8 or newer (Mountain Lion, Mavericks)
    if [[ $VERSION -ge 12 ]]
    then
      case "$RELEASE" in
        R14*)
          CFLAGS="-DERTS_DO_INCL_GLB_INLINE_FUNC_DEF"
          apply_r14_osx_patch
      esac
    fi

    CFLAGS="$CFLAGS -O0" ./configure --disable-hipe --without-javac --enable-smp-support \
                       --enable-threads --enable-kernel-poll \
                       --enable-darwin-64bit --prefix="$INSTALL" 1>>"$TMP_PATH/erlbrew.log" 2>&1
  else
    echo "Sorry $OSTYPE isn't supported yet. Patches welcome. :)"
    exit 1
  fi

  echo "Building Erlang $RELEASE"
  make 1>>"$TMP_PATH/erlbrew.log" 2>&1
}

install() {
  if [ ! -d "$INSTALL" ]; then
    mkdir -p "$INSTALL"
  else
    rm -rf "$INSTALL"
    mkdir -p "$INSTALL"
  fi

  echo "Installing Erlang $RELEASE"
  make install 1>>"$TMP_PATH/erlbrew.log" 2>&1

}

use() {
  if [ ! -d "$BIN_PATH" ]; then
    mkdir -p "$BIN_PATH"
  else
    rm -rf "$BIN_PATH"
    mkdir -p "$BIN_PATH"
  fi

  if [ -d "$INSTALL" ]; then
    for file in $(ls "$INSTALL/lib/erlang/bin/"*)
    do
      ln -s $file "$BIN_PATH"
    done

    hash -r
    echo $RELEASE > "$STATE"
    echo "You have switched to Erlang $RELEASE"
  else
    echo "Erlang $RELEASE doesn't seem to be installed."
    exit 1
  fi
}

list() {
  CURRENT="hoge"
  if [ -e "$STATE" ]; then
    CURRENT=$(<"$STATE")
  fi
  if [ -d $WORK ]; then
    for r in $(ls -1 $WORK)
    do
      if [[ "$r" == "$CURRENT" ]]; then
        echo "* $r"
      else
        echo "  $r"
      fi
    done
  else
    echo "No Erlang environments installed"
    exit 1
  fi
}

apply_r14_osx_patch() {
  patch -p0 <<END_OF_PATCH
--- erts/emulator/beam/beam_bp.c.orig	2011-10-03 13:12:07.000000000 -0500
+++ erts/emulator/beam/beam_bp.c	2013-10-04 13:42:03.000000000 -0500
@@ -496,7 +496,8 @@
 }
 
 /* bp_hash */
-ERTS_INLINE Uint bp_sched2ix() {
+#ifndef ERTS_DO_INCL_GLB_INLINE_FUNC_DEF
+ERTS_GLB_INLINE Uint bp_sched2ix() {
 #ifdef ERTS_SMP
     ErtsSchedulerData *esdp;
     esdp = erts_get_scheduler_data();
@@ -505,6 +506,7 @@
     return 0;
 #endif
 }
+#endif
 static void bp_hash_init(bp_time_hash_t *hash, Uint n) {
     Uint size = sizeof(bp_data_time_item_t)*n;
     Uint i;
--- erts/emulator/beam/beam_bp.h.orig	2011-10-03 13:12:07.000000000 -0500
+++ erts/emulator/beam/beam_bp.h	2013-10-04 13:42:08.000000000 -0500
@@ -144,7 +144,19 @@
 #define ErtsSmpBPUnlock(BDC)
 #endif
 
-ERTS_INLINE Uint bp_sched2ix(void);
+ERTS_GLB_INLINE Uint bp_sched2ix(void);
+
+#ifdef ERTS_DO_INCL_GLB_INLINE_FUNC_DEF
+ERTS_GLB_INLINE Uint bp_sched2ix() {
+#ifdef ERTS_SMP
+    ErtsSchedulerData *esdp;
+    esdp = erts_get_scheduler_data();
+    return esdp->no - 1;
+#else
+    return 0;
+#endif
+}
+#endif
 
 #ifdef ERTS_SMP
 #define bp_sched2ix_proc(p) ((p)->scheduler_data->no - 1)
END_OF_PATCH
}

case "$CMD" in
    download)
        _cleanup
        download
        ;;
    build)
        _cleanup
        download
        build
        ;;
    install)
        _cleanup
        download
        build
        install
        ;;
    use)
        _cleanup
        use
        ;;
    list)
        _cleanup
        list
        ;;
    *)
        usage
        exit 1
esac
